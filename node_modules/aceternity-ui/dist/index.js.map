{"version":3,"sources":["../src/commands/add.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/registry/index.ts","../src/utils/registry/schema.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/commands/init.ts","../src/utils/templates.ts","../src/utils/get-project-info.ts","../src/index.ts","../src/utils/get-package-info.ts"],"sourcesContent":["import { existsSync, promises as fs } from \"fs\";\nimport path from \"path\";\nimport { getConfig } from \"@/src/utils/get-config\";\nimport { getPackageManager } from \"@/src/utils/get-package-manager\";\nimport { handleError } from \"@/src/utils/handle-error\";\nimport {\n  ASCII_TEXT,\n  logger,\n} from \"@/src/utils/logger\";\nimport {\n  fetchTree,\n  fetchTreeFromShadcn,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndexAceternityUI,\n  getRegistryIndexShadcn,\n  resolveTreeWithShadcn,\n} from \"@/src/utils/registry\";\nimport { transform } from \"@/src/utils/transformers\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { execa } from \"execa\";\nimport ora from \"ora\";\nimport prompts from \"prompts\";\nimport { z } from \"zod\";\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  example: z.boolean(),\n  shadcn: z.boolean(),\n  path: z.string().optional(),\n});\n\nexport const add = new Command()\n  .addHelpText(\"before\", ASCII_TEXT)\n  .name(\"add\")\n  .description(\"Add ui components to your project\")\n  .argument(\"[components...]\", \"the components to add\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-e, --example\", \"include available examples & demos\", false)\n  .option(\"-s, --shadcn\", \"include available components from shadcn-ui\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      });\n\n      const cwd = path.resolve(options.cwd);\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      const config = await getConfig(cwd);\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${chalk.green(\n            `init`\n          )} to create a components.json file.`\n        );\n        process.exit(1);\n      }\n\n      const registryIndex = !options.shadcn\n        ? await getRegistryIndexAceternityUI()\n        : [];\n      const shadcnRegistryIndex = await getRegistryIndexShadcn();\n\n      let selectedComponents = options.all\n        ? (options.shadcn ? shadcnRegistryIndex : registryIndex).map(\n            (entry) => entry.name\n          )\n        : options.components;\n\n      if (!options.components?.length && !options.all) {\n        const filterIndex = (): typeof registryIndex =>\n          registryIndex.filter((e) => {\n            const type = e.type.split(\":\")[1] as string;\n            return [\"aceternityui\", \"ui\", \"blocks\"].includes(type) || options.example && type === 'example';\n          });\n\n        const multiselectChoice = options.shadcn\n          ? shadcnRegistryIndex\n          : filterIndex();\n        const { components } = await prompts({\n          type: \"multiselect\",\n          name: \"components\",\n          message: \"Which components would you like to add?\",\n          hint: \"Space to select. A to toggle all. Enter to submit.\",\n          instructions: false,\n          choices: multiselectChoice.map((entry) => ({\n            title: `${entry.name} (${entry.type.split(':')[1]})`,\n            value: entry.name,\n            selected: options.all\n              ? true\n              : options.components?.includes(entry.name),\n          })),\n        });\n        selectedComponents = components;\n      }\n\n      if (!selectedComponents?.length) {\n        logger.warn(\"No components selected. Exiting.\");\n        process.exit(0);\n      }\n\n      const { aceternityuiTree, shadcnTree } = await resolveTreeWithShadcn(\n        shadcnRegistryIndex,\n        registryIndex,\n        selectedComponents,\n        options.example,\n        options.shadcn\n      );\n\n      let aceternityPayload = await fetchTree(\n        aceternityuiTree,\n      );\n      let shadcnPayload = await fetchTreeFromShadcn(config.style, shadcnTree);\n      const baseColor = await getRegistryBaseColor(config.tailwind.baseColor);\n\n      if (!aceternityPayload.length && !shadcnPayload.length) {\n        logger.warn(\"Selected components not found. Exiting.\");\n        process.exit(0);\n      } else {\n        aceternityPayload.length !== 0 &&\n          logger.info(\n            `Found ${aceternityPayload.length}x Aceternity UI components.`\n          );\n        shadcnPayload.length !== 0 &&\n          logger.info(`Found ${shadcnPayload.length}x Shadcn UI components.`);\n      }\n\n      aceternityPayload = aceternityPayload.map((item) => {\n        return {\n          ...item,\n          source: \"aceternityui\",\n        };\n      });\n\n      shadcnPayload = shadcnPayload.map((item) => {\n        return {\n          ...item,\n          source: \"shadcn\",\n        };\n      });\n\n      const totalPayload = [...aceternityPayload, ...shadcnPayload];\n\n      if (!options.yes) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `Ready to install components and dependencies. Proceed?`,\n          initial: true,\n        });\n\n        if (!proceed) {\n          process.exit(0);\n        }\n      }\n\n      const spinner = ora(`Installing components...`).start();\n      for (const item of totalPayload) {\n        spinner.text = `Installing ${item.name}...`;\n        const targetDir = await getItemTargetPath(\n          config,\n          item,\n          options.path ? path.resolve(cwd, options.path) : undefined\n        );\n\n        if (!targetDir) {\n          continue;\n        }\n\n        if (!existsSync(targetDir)) {\n          await fs.mkdir(targetDir, { recursive: true });\n        }\n\n        const existingComponent = item.files.filter((file) =>\n          existsSync(path.resolve(targetDir, file.name))\n        );\n\n        if (existingComponent.length && !options.overwrite) {\n          if (selectedComponents.includes(item.name)) {\n            spinner.stop();\n            const { overwrite } = await prompts({\n              type: \"confirm\",\n              name: \"overwrite\",\n              message: `Component ${item.name} already exists. Would you like to overwrite?`,\n              initial: false,\n            });\n\n            if (!overwrite) {\n              logger.info(\n                `Skipped ${item.name}. To overwrite, run with the ${chalk.green(\n                  \"--overwrite\"\n                )} flag.`\n              );\n              continue;\n            }\n\n            spinner.start(`Installing ${item.name}...`);\n          } else {\n            continue;\n          }\n        }\n\n        for (const file of item.files) {\n          let filePath = path.resolve(targetDir, file.name);\n\n\n          // Run transformers.\n          const content = await transform({\n            filename: file.name,\n            raw: file.content,\n            config,\n            baseColor,\n            source: item.source,\n          });\n\n          if (!config.tsx) {\n            filePath = filePath.replace(/\\.tsx$/, \".jsx\");\n            filePath = filePath.replace(/\\.ts$/, \".js\");\n          }\n\n          await fs.writeFile(filePath, content);\n        }\n\n        const packageManager = await getPackageManager(cwd);\n\n        // Install dependencies.\n        if (item.dependencies?.length) {\n          try {\n            await execa(\n              packageManager,\n              [\n                packageManager === \"npm\" ? \"install\" : \"add\",\n                ...item.dependencies,\n              ],\n              {\n                cwd,\n              }\n            );\n          } catch (error) {\n            logger.warn(\n              `\\nFailed to install dependencies for ${\n                item.name\n              }.\\n\\t-${item.dependencies.join(\"\\n\\t- \")}\\n\\nReason: ${error}`\n            );\n          }\n        }\n\n        // Install devDependencies.\n        if (item.devDependencies?.length) {\n          try {\n            await execa(\n              packageManager,\n              [\n                packageManager === \"npm\" ? \"install\" : \"add\",\n                \"-D\",\n                ...item.devDependencies,\n              ],\n              {\n                cwd,\n              }\n            );\n          } catch (error) {\n            logger.warn(\n              `\\nFailed to install devDependencies for ${\n                item.name\n              }.\\n\\t-${item.devDependencies.join(\"\\n\\t- \")}\\n\\nReason: ${error}`\n            );\n          }\n        }\n      }\n\n      spinner.succeed(`Done.`);\n    } catch (error) {\n      console.log(error);\n      handleError(error);\n    }\n  });\n","import path from \"path\";\nimport { resolveImport } from \"@/src/utils/resolve-import\";\nimport { cosmiconfig } from \"cosmiconfig\";\nimport { loadConfig } from \"tsconfig-paths\";\nimport { z } from \"zod\";\n\nexport const DEFAULT_STYLE = \"default\";\nexport const DEFAULT_COMPONENTS = \"@/components\";\nexport const DEFAULT_COMPONENTS_UI = \"@/components/ui\";\nexport const DEFAULT_UTILS = \"@/lib/utils\";\nexport const DEFAULT_TAILWIND_CSS = \"app/globals.css\";\nexport const DEFAULT_TAILWIND_CONFIG = \"tailwind.config.js\";\nexport const DEFAULT_TAILWIND_BASE_COLOR = \"slate\";\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig(\"components\", {\n  searchPlaces: [\"components.json\"],\n});\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default(\"\").optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      examples: z.string().optional(),\n      blocks: z.string().optional(),\n    }),\n  })\n  .strict();\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>;\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    ui: z.string(),\n  }),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd);\n\n  if (!config) {\n    return null;\n  }\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd);\n\n  if (tsConfig.resultType === \"failed\") {\n    throw new Error(\n      `Failed to load ${config.tsx ? \"tsconfig\" : \"jsconfig\"}.json. ${\n        tsConfig.message ?? \"\"\n      }`.trim(),\n    );\n  }\n  const components = await resolveImport(\n    config.aliases[\"components\"],\n    tsConfig,\n  );\n  const ui = `${components}/ui`;\n\n  const newAliases = {\n    ui: `${config.aliases.components}/ui`,\n  };\n\n  const newConfig = {\n    ...config,\n    aliases: {\n      ...config.aliases,\n      ...newAliases,\n    },\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases[\"utils\"], tsConfig),\n      components,\n      ui,\n    },\n  };\n  return configSchema.parse(newConfig);\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd);\n\n    if (!configResult) {\n      return null;\n    }\n\n    return rawConfigSchema.parse(configResult.config);\n  } catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`);\n  }\n}\n","import {\n  createMatchPath,\n  type ConfigLoaderSuccessResult,\n} from \"tsconfig-paths\";\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">,\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"],\n  );\n}\n","import { detect } from \"@antfu/ni\";\n\nexport async function getPackageManager(\n  targetDir: string,\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\n\n  if (packageManager === \"yarn@berry\") return \"yarn\";\n  if (packageManager === \"pnpm@6\") return \"pnpm\";\n  if (packageManager === \"bun\") return \"bun\";\n\n  return packageManager ?? \"npm\";\n}\n","import chalk from \"chalk\";\nimport gradient from \"gradient-string\";\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  break() {\n    console.log(\"\");\n  },\n};\n\nconst TEXT = `\n\n █████╗  ██████╗███████╗████████╗███████╗██████╗ ███╗   ██╗██╗████████╗██╗   ██╗    ██╗   ██╗██╗\n██╔══██╗██╔════╝██╔════╝╚══██╔══╝██╔════╝██╔══██╗████╗  ██║██║╚══██╔══╝╚██╗ ██╔╝    ██║   ██║██║\n███████║██║     █████╗     ██║   █████╗  ██████╔╝██╔██╗ ██║██║   ██║    ╚████╔╝     ██║   ██║██║\n██╔══██║██║     ██╔══╝     ██║   ██╔══╝  ██╔══██╗██║╚██╗██║██║   ██║     ╚██╔╝      ██║   ██║██║\n██║  ██║╚██████╗███████╗   ██║   ███████╗██║  ██║██║ ╚████║██║   ██║      ██║       ╚██████╔╝██║\n╚═╝  ╚═╝ ╚═════╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝      ╚═╝        ╚═════╝ ╚═╝\n                                                                                                                                                                                                                                                     \n`;\n\nconst theme = {\n  magenta: \"#FFFFFF\",\n  red: \"#FFFFFF\",\n  yellow: \"#FFFFFF\",\n};\n\nconst printer = gradient(Object.values(theme));\n\nexport const ASCII_TEXT = printer.multiline(TEXT);\n\nexport const ColorFullText = (string: string) => printer.multiline(string);\n","import { logger } from \"@/src/utils/logger\";\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error);\n    process.exit(1);\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.error(\"Something went wrong. Please try again.\");\n  process.exit(1);\n}\n","import path from \"path\";\nimport { Config } from \"@/src/utils/get-config\";\nimport {\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemWithContentSchema,\n  registryWithContentSchema,\n  stylesSchema,\n} from \"@/src/utils/registry/schema\";\nimport { HttpsProxyAgent } from \"https-proxy-agent\";\nimport fetch from \"node-fetch\";\nimport { z } from \"zod\";\n\nconst baseUrl = process.env.COMPONENTS_REGISTRY_URL ?? \"https://ui.aceternity.com\";\n\nconst shadcnBaseUrl = \"https://ui.shadcn.com\";\n\ntype theTree = z.infer<typeof registryIndexSchema>;\n\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined;\n\nexport async function getRegistryIndexAceternityUI() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"], baseUrl);\n\n    // @ts-ignore\n    return registryIndexSchema.parse([...result]);\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to fetch components from Aceternity UI registry.\");\n  }\n}\n\nexport async function getRegistryIndexShadcn() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"], shadcnBaseUrl);\n\n    return registryIndexSchema.parse(result);\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to fetch components from Shadcn UI registry.\");\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry([\"styles/index.json\"], shadcnBaseUrl);\n\n    return stylesSchema.parse(result);\n  } catch (error) {\n    throw new Error(\"Failed to fetch styles from registry.\");\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: \"slate\",\n      label: \"Slate\",\n    },\n    {\n      name: \"gray\",\n      label: \"Gray\",\n    },\n    {\n      name: \"zinc\",\n      label: \"Zinc\",\n    },\n    {\n      name: \"neutral\",\n      label: \"Neutral\",\n    },\n    {\n      name: \"stone\",\n      label: \"Stone\",\n    },\n  ];\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry(\n      [`colors/${baseColor}.json`],\n      shadcnBaseUrl,\n    );\n\n    return registryBaseColorSchema.parse(result);\n  } catch (error) {\n    throw new Error(\"Failed to fetch base color from registry.\");\n  }\n}\n\nexport async function resolveTreeWithShadcn(\n  shadcnIndex: theTree,\n  index: theTree,\n  names: string[],\n  examples  = false,\n  calledByShadcn = false,\n): Promise<{ shadcnTree: theTree; aceternityuiTree: theTree }> {\n  const shadcnTree: theTree = [];\n  const aceternityuiTree: theTree = [];\n\n  for (const name of names) {\n    if (!calledByShadcn) {\n      const entry = index.find((e) => e.name === name);\n\n      if (!entry) {\n        const newName = name.split(\":\")[1];\n        const shadcnEntry = shadcnIndex.find((e) => e.name === newName);\n\n        if (!shadcnEntry) {\n          continue;\n        }\n        shadcnTree.push(shadcnEntry);\n\n        if (shadcnEntry.registryDependencies) {\n          const { shadcnTree: shadcnTreeDependencies } =\n            await resolveTreeWithShadcn(\n              shadcnIndex,\n              index,\n              shadcnEntry.registryDependencies,\n              true,\n            );\n          shadcnTree.push(...shadcnTreeDependencies);\n        }\n      }\n\n      entry && aceternityuiTree.push(entry);\n\n      if (examples) {\n        const exampleEntry = index.filter((e) => e.type === 'components:example' && e.registryDependencies?.includes(name));\n        if (exampleEntry.length) {\n          aceternityuiTree.push(...exampleEntry);\n        }\n      }\n\n      if (entry && entry.registryDependencies) {\n        const {\n          aceternityuiTree: aceternityuiTreeDependencies,\n          shadcnTree: shadcnTreeDependencies,\n        } = await resolveTreeWithShadcn(\n          shadcnIndex,\n          index,\n          entry.registryDependencies,\n          examples,\n          false,\n        );\n        shadcnTree.push(...shadcnTreeDependencies);\n        aceternityuiTree.push(...aceternityuiTreeDependencies);\n      }\n    } else {\n      const entry = shadcnIndex.find((e) => e.name === name);\n\n      if (!entry) {\n        continue;\n      }\n\n      shadcnTree.push(entry);\n\n      if (entry.registryDependencies) {\n        const { shadcnTree: shadcnTreeDependencies } =\n          await resolveTreeWithShadcn(\n            shadcnIndex,\n            index,\n            entry.registryDependencies,\n            examples,\n            true,\n          );\n        shadcnTree.push(...shadcnTreeDependencies);\n      }\n    }\n  }\n\n  return {\n    shadcnTree: shadcnTree.filter(\n      (component, index, self) =>\n        self.findIndex((c) => c.name === component.name) === index,\n    ),\n    aceternityuiTree: aceternityuiTree.filter(\n      (component, index, self) =>\n        self.findIndex((c) => c.name === component.name) === index,\n    ),\n  };\n}\n\nexport async function resolveTree(index: theTree, names: string[]) {\n  const tree: theTree = [];\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name);\n\n    if (!entry) {\n      continue;\n    }\n\n    tree.push(entry);\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies);\n      tree.push(...dependencies);\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index,\n  );\n}\n\nexport async function fetchTree(tree: theTree) {\n  try {\n    // const treeNormal = tree.filter((item) => !item.type.includes(\"blocks\"));\n    const treeNormal = tree;\n    // {baseUrl}/registry/components/ui/[name].json.\n    const paths = treeNormal.map((item) => {\n      const [parent, subfolder] = item.type.split(\":\");\n      return `${parent}/${subfolder}/${item.name}.json`;\n    });\n    const result = await fetchRegistry(paths, baseUrl);\n    return registryWithContentSchema.parse([...result]);\n  } catch (error) {\n    throw new Error(`Failed to fetch tree from Aceternity UI registry.`);\n  }\n}\n\nexport async function fetchTreeFromShadcn(style: string, tree: theTree) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`);\n    const result = await fetchRegistry(paths, shadcnBaseUrl);\n\n    return registryWithContentSchema.parse(result);\n  } catch (error) {\n    throw new Error(`Failed to fetch tree from Shadcn UI registry.`);\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemWithContentSchema>, \"type\">,\n  override?: string,\n) {\n  if (override) {\n    return override;\n  }\n\n  const [parent, type] = item.type.split(\":\");\n  if (!(parent in config.resolvedPaths)) {\n    return null;\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type,\n  );\n}\n\nasync function fetchRegistry(\n  paths: string[],\n  fetchBaseUrl = baseUrl,\n  env?: string,\n) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const response = await fetch(`${fetchBaseUrl}/registry/${path}`, {\n          agent,\n          headers: {},\n        });\n        return await response.json();\n      }),\n    );\n    return results;\n  } catch (error) {\n    throw new Error(`Failed to fetch registry from ${fetchBaseUrl}.`);\n  }\n}\n","import { z } from \"zod\";\n\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(z.string()),\n  type: z.enum([\n    \"components:ui\",\n    \"components:component\",\n    \"components:example\",\n    \"components:aceternityui\",\n    \"components:blocks\",\n  ]),\n  source: z.enum([\"aceternityui\", \"shadcn\"]).optional(),\n});\n\nexport const registryIndexSchema = z.array(registryItemSchema);\n\nexport const registryItemWithContentSchema = registryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    }),\n  ),\n});\n\nexport const registryWithContentSchema = z.array(registryItemWithContentSchema);\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  }),\n);\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n});\n","import { promises as fs } from \"fs\";\nimport { tmpdir } from \"os\";\nimport path from \"path\";\nimport { Config } from \"@/src/utils/get-config\";\nimport { registryBaseColorSchema } from \"@/src/utils/registry/schema\";\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\";\nimport { transformImport } from \"@/src/utils/transformers/transform-import\";\nimport { transformJsx } from \"@/src/utils/transformers/transform-jsx\";\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\";\nimport { Project, ScriptKind, type SourceFile } from \"ts-morph\";\nimport { z } from \"zod\";\n\nimport { transformTwPrefixes } from \"./transform-tw-prefix\";\n\nexport type TransformOpts = {\n  filename: string;\n  raw: string;\n  config: Config;\n  baseColor?: z.infer<typeof registryBaseColorSchema>;\n  source: \"aceternityui\" | \"shadcn\" | undefined;\n};\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile;\n  },\n) => Promise<Output>;\n\nconst shandcnTransformers: Transformer[] = [\n  transformImport,\n  transformRsc,\n  transformCssVars,\n  transformTwPrefixes,\n];\n\nconst acetenirTransformers: Transformer[] = [\n  transformImport,\n  transformRsc,\n  transformTwPrefixes,\n];\n\nconst project = new Project({\n  compilerOptions: {},\n});\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"));\n  return path.join(dir, filename);\n}\n\nexport async function transform(opts: TransformOpts) {\n  const { source } = opts;\n  const tempFile = await createTempSourceFile(opts.filename);\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  });\n\n  const transformers = source === \"aceternityui\" ? acetenirTransformers : shandcnTransformers;\n\n  for (const transformer of transformers) {\n    transformer({ sourceFile, ...opts });\n  }\n\n  return await transformJsx({\n    sourceFile,\n    ...opts,\n  });\n}\n","import { registryBaseColorSchema } from \"@/src/utils/registry/schema\";\nimport { Transformer } from \"@/src/utils/transformers\";\nimport { ScriptKind, SyntaxKind } from \"ts-morph\";\nimport { z } from \"zod\";\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile;\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // console.log(openingElements)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText();\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, \"\"),\n        baseColor.inlineColors,\n      );\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`);\n    }\n  });\n\n  return sourceFile;\n};\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//           console.log(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes(\"/\") && !className.includes(\":\")) {\n    return [null, className, null];\n  }\n\n  const parts: (string | null)[] = [];\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split(\"/\");\n\n  // Check if rest has a colon.\n  if (!rest.includes(\":\")) {\n    return [null, rest, alpha];\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(\":\");\n\n  // We take the last item from the split as the name.\n  const name = split.pop();\n\n  // We glue back the rest of the split.\n  const variant = split.join(\":\");\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null);\n\n  return parts;\n}\n\nconst PREFIXES = [\"bg-\", \"text-\", \"border-\", \"ring-offset-\", \"ring-\"];\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>[\"inlineColors\"],\n) {\n  // Handle border classes.\n  if (input.includes(\" border \")) {\n    input = input.replace(\" border \", \" border border-border \");\n  }\n\n  // Build color mappings.\n  const classNames = input.split(\" \");\n  const lightMode = new Set<string>();\n  const darkMode = new Set<string>();\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className);\n    const prefix = PREFIXES.find((prefix) => value?.startsWith(prefix));\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className);\n      }\n      continue;\n    }\n\n    const needle = value?.replace(prefix, \"\");\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\"),\n      );\n\n      darkMode.add(\n        [\"dark\", variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\"),\n      );\n      continue;\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className);\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(\" \").trim();\n}\n","import { Transformer } from \"@/src/utils/transformers\";\n\nexport const transformImport: Transformer = async ({ sourceFile, config }) => {\n  const importDeclarations = sourceFile.getImportDeclarations();\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = importDeclaration.getModuleSpecifierValue();\n\n    // Replace @/registry/[style] with the components alias.\n    if (moduleSpecifier.startsWith(\"@/registry/\")) {\n      if (config.aliases.ui) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(/^@\\/registry\\/[^/]+\\/ui/, config.aliases.ui),\n        );\n      } else {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(\n            /^@\\/registry\\/[^/]+/,\n            config.aliases.components,\n          ),\n        );\n      }\n    }\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (moduleSpecifier == \"@/lib/utils\") {\n      const namedImports = importDeclaration.getNamedImports();\n      const cnImport = namedImports.find((i) => i.getName() === \"cn\");\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(/^@\\/lib\\/utils/, config.aliases.utils),\n        );\n      }\n    }\n  }\n\n  return sourceFile;\n};\n","import { type Transformer } from \"@/src/utils/transformers\";\nimport { transformFromAstSync } from \"@babel/core\";\nimport { parse, ParserOptions } from \"@babel/parser\";\n// @ts-ignore\nimport transformTypescript from \"@babel/plugin-transform-typescript\";\nimport * as recast from \"recast\";\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: \"module\",\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    \"asyncGenerators\",\n    \"bigInt\",\n    \"classPrivateMethods\",\n    \"classPrivateProperties\",\n    \"classProperties\",\n    \"classStaticBlock\",\n    \"decimal\",\n    \"decorators-legacy\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportDefaultFrom\",\n    \"exportNamespaceFrom\",\n    \"functionBind\",\n    \"functionSent\",\n    \"importAssertions\",\n    \"importMeta\",\n    \"nullishCoalescingOperator\",\n    \"numericSeparator\",\n    \"objectRestSpread\",\n    \"optionalCatchBinding\",\n    \"optionalChaining\",\n    [\n      \"pipelineOperator\",\n      {\n        proposal: \"minimal\",\n      },\n    ],\n    [\n      \"recordAndTuple\",\n      {\n        syntaxType: \"hash\",\n      },\n    ],\n    \"throwExpressions\",\n    \"topLevelAwait\",\n    \"v8intrinsic\",\n    \"typescript\",\n    \"jsx\",\n  ],\n};\n\nexport const transformJsx: Transformer<String> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText();\n\n  if (config.tsx) {\n    return output;\n  }\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS);\n      },\n    },\n  });\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  });\n\n  if (!result || !result.ast) {\n    throw new Error(\"Failed to transform JSX\");\n  }\n\n  return recast.print(result.ast).code;\n};\n","import { Transformer } from \"@/src/utils/transformers\";\nimport { SyntaxKind } from \"ts-morph\";\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile;\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement);\n  if (first?.getText() === `\"use client\"`) {\n    first.remove();\n  }\n\n  return sourceFile;\n};\n","import { Transformer } from \"@/src/utils/transformers\";\nimport { SyntaxKind } from \"ts-morph\";\n\nimport { splitClassName } from \"./transform-css-vars\";\n\nexport const transformTwPrefixes: Transformer = async ({\n  sourceFile,\n  config,\n}) => {\n  if (!config.tailwind?.prefix) {\n    return sourceFile;\n  }\n\n  // Find the cva function calls.\n  sourceFile\n    .getDescendantsOfKind(SyntaxKind.CallExpression)\n    .filter((node) => node.getExpression().getText() === \"cva\")\n    .forEach((node) => {\n      // cva(base, ...)\n      if (node.getArguments()[0]?.isKind(SyntaxKind.StringLiteral)) {\n        const defaultClassNames = node.getArguments()[0];\n        if (defaultClassNames) {\n          defaultClassNames.replaceWithText(\n            `\"${applyPrefix(\n              defaultClassNames.getText()?.replace(/\"/g, \"\"),\n              config.tailwind.prefix,\n            )}\"`,\n          );\n        }\n      }\n\n      // cva(..., { variants: { ... } })\n      if (node.getArguments()[1]?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        node\n          .getArguments()[1]\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .find((node) => node.getName() === \"variants\")\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            node\n              .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n              .forEach((node) => {\n                const classNames = node.getInitializerIfKind(\n                  SyntaxKind.StringLiteral,\n                );\n                if (classNames) {\n                  classNames?.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"/g, \"\"),\n                      config.tailwind.prefix,\n                    )}\"`,\n                  );\n                }\n              });\n          });\n      }\n    });\n\n  // Find all jsx attributes with the name className.\n  sourceFile.getDescendantsOfKind(SyntaxKind.JsxAttribute).forEach((node) => {\n    if (node.getName() === \"className\") {\n      // className=\"...\"\n      if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n        const value = node.getInitializer();\n        if (value) {\n          value.replaceWithText(\n            `\"${applyPrefix(\n              value.getText()?.replace(/\"/g, \"\"),\n              config.tailwind.prefix,\n            )}\"`,\n          );\n        }\n      }\n\n      // className={...}\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        // Check if it's a call to cn().\n        const callExpression = node\n          .getInitializer()\n          ?.getDescendantsOfKind(SyntaxKind.CallExpression)\n          .find((node) => node.getExpression().getText() === \"cn\");\n        if (callExpression) {\n          // Loop through the arguments.\n          callExpression.getArguments().forEach((node) => {\n            if (\n              node.isKind(SyntaxKind.ConditionalExpression) ||\n              node.isKind(SyntaxKind.BinaryExpression)\n            ) {\n              node\n                .getChildrenOfKind(SyntaxKind.StringLiteral)\n                .forEach((node) => {\n                  node.replaceWithText(\n                    `\"${applyPrefix(\n                      node.getText()?.replace(/\"/g, \"\"),\n                      config.tailwind.prefix,\n                    )}\"`,\n                  );\n                });\n            }\n\n            if (node.isKind(SyntaxKind.StringLiteral)) {\n              node.replaceWithText(\n                `\"${applyPrefix(\n                  node.getText()?.replace(/\"/g, \"\"),\n                  config.tailwind.prefix,\n                )}\"`,\n              );\n            }\n          });\n        }\n      }\n    }\n\n    // classNames={...}\n    if (node.getName() === \"classNames\") {\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        node\n          .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            if (node.getInitializer()?.isKind(SyntaxKind.CallExpression)) {\n              const callExpression = node.getInitializerIfKind(\n                SyntaxKind.CallExpression,\n              );\n              if (callExpression) {\n                // Loop through the arguments.\n                callExpression.getArguments().forEach((arg) => {\n                  if (arg.isKind(SyntaxKind.ConditionalExpression)) {\n                    arg\n                      .getChildrenOfKind(SyntaxKind.StringLiteral)\n                      .forEach((node) => {\n                        node.replaceWithText(\n                          `\"${applyPrefix(\n                            node.getText()?.replace(/\"/g, \"\"),\n                            config.tailwind.prefix,\n                          )}\"`,\n                        );\n                      });\n                  }\n\n                  if (arg.isKind(SyntaxKind.StringLiteral)) {\n                    arg.replaceWithText(\n                      `\"${applyPrefix(\n                        arg.getText()?.replace(/\"/g, \"\"),\n                        config.tailwind.prefix,\n                      )}\"`,\n                    );\n                  }\n                });\n              }\n            }\n\n            if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n              if (node.getName() !== \"variant\") {\n                const classNames = node.getInitializer();\n                if (classNames) {\n                  classNames.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"/g, \"\"),\n                      config.tailwind.prefix,\n                    )}\"`,\n                  );\n                }\n              }\n            }\n          });\n      }\n    }\n  });\n\n  return sourceFile;\n};\n\nexport function applyPrefix(input: string, prefix: string = \"\") {\n  const classNames = input.split(\" \");\n  const prefixed: string[] = [];\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className);\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`);\n    } else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`);\n    }\n  }\n  return prefixed.join(\" \");\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split(\"\\n\");\n  for (let line of lines) {\n    if (line.includes(\"@apply\")) {\n      const originalTWCls = line.replace(\"@apply\", \"\").trim();\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix);\n      css = css.replace(originalTWCls, prefixedTwCls);\n    }\n  }\n  return css;\n}\n","import { existsSync, promises as fs } from \"fs\";\nimport path from \"path\";\nimport { generateDistinctId } from \"@/src/utils/distinct-id\";\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  type Config,\n} from \"@/src/utils/get-config\";\nimport * as templates from \"@/src/utils/templates\";\nimport template from \"lodash.template\";\n\nimport { getPackageManager } from \"@/src/utils/get-package-manager\";\nimport { getProjectConfig, preFlight } from \"@/src/utils/get-project-info\";\nimport { handleError } from \"@/src/utils/handle-error\";\nimport { ASCII_TEXT, logger } from \"@/src/utils/logger\";\nimport {\n  getRegistryBaseColor,\n  getRegistryBaseColors,\n  getRegistryStyles,\n} from \"@/src/utils/registry\";\nimport chalk from \"chalk\";\nimport { Command } from \"commander\";\nimport { execa } from \"execa\";\n\nimport ora from \"ora\";\nimport prompts from \"prompts\";\nimport { z } from \"zod\";\n\nimport { applyPrefixesCss } from \"../utils/transformers/transform-tw-prefix\";\n\nconst PROJECT_DEPENDENCIES = [\n  \"tailwindcss-animate\",\n  \"class-variance-authority\",\n  \"clsx\",\n  \"tailwind-merge\",\n  \"framer-motion\",\n];\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n});\n\nexport const init = new Command()\n  .addHelpText(\"before\", ASCII_TEXT)\n  .name(\"init\")\n  .description(\"Initialize your project with shadcn-ui config & aceternity-ui\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\"-d, --defaults,\", \"use default configuration.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd(),\n  )\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse(opts);\n      const cwd = path.resolve(options.cwd);\n\n      // Ensure target directory exists.\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      preFlight(cwd);\n\n      const projectConfig = await getProjectConfig(cwd);\n      if (projectConfig) {\n        const config = await promptForMinimalConfig(\n          cwd,\n          projectConfig,\n          opts.defaults,\n        );\n        await runInit(cwd, config);\n      } else {\n        // Read config.\n        const existingConfig = await getConfig(cwd);\n        const config = await promptForConfig(cwd, existingConfig, options.yes);\n        await runInit(cwd, config);\n      }\n\n      logger.info(\"\");\n      logger.info(\n        `${chalk.green(\n          \"Success!\",\n        )} Project initialization completed. You may now add both shadcn-ui and aceternity-ui components.`,\n      );\n      logger.info(\"\");\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nexport async function promptForConfig(\n  cwd: string,\n  defaultConfig: Config | null = null,\n  skip = false,\n) {\n  const highlight = (text: string) => chalk.cyan(text);\n\n  const styles = await getRegistryStyles();\n  const baseColors = await getRegistryBaseColors();\n\n  const options = await prompts([\n    {\n      type: \"toggle\",\n      name: \"typescript\",\n      message: `Would you like to use ${highlight(\n        \"TypeScript\",\n      )} (recommended)?`,\n      initial: defaultConfig?.tsx ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"select\",\n      name: \"style\",\n      message: `Which ${highlight(\"style\")} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: \"select\",\n      name: \"tailwindBaseColor\",\n      message: `Which color would you like to use as ${highlight(\n        \"base color\",\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"tailwindCss\",\n      message: `Where is your ${highlight(\"global CSS\")} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: \"toggle\",\n      name: \"tailwindCssVariables\",\n      message: `Would you like to use ${highlight(\n        \"CSS variables\",\n      )} for colors?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindPrefix\",\n      message: `Are you using a custom ${highlight(\n        \"tailwind prefix eg. tw-\",\n      )}? (Leave blank if not)`,\n      initial: \"\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindConfig\",\n      message: `Where is your ${highlight(\"tailwind.config.js\")} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: \"text\",\n      name: \"components\",\n      message: `Configure the import alias for ${highlight(\"components\")}:`,\n      initial: defaultConfig?.aliases[\"components\"] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: \"text\",\n      name: \"utils\",\n      message: `Configure the import alias for ${highlight(\"utils\")}:`,\n      initial: defaultConfig?.aliases[\"utils\"] ?? DEFAULT_UTILS,\n    },\n    {\n      type: \"toggle\",\n      name: \"rsc\",\n      message: `Are you using ${highlight(\"React Server Components\")}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n  ]);\n\n  const config = rawConfigSchema.parse({\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    rsc: options.rsc,\n    tsx: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n      ui: `${options.components}/ui`,\n      examples: `${options.components}/examples`,\n      blocks: `${options.components}/blocks`,\n    },\n  });\n\n  if (!skip) {\n    const { proceed } = await prompts({\n      type: \"confirm\",\n      name: \"proceed\",\n      message: `Write configuration to ${highlight(\n        \"components.json\",\n      )}. Proceed?`,\n      initial: true,\n    });\n\n    if (!proceed) {\n      process.exit(0);\n    }\n  }\n\n  // Write to file.\n  logger.info(\"\");\n  const spinner = ora(`Writing components.json...`).start();\n  const targetPath = path.resolve(cwd, \"components.json\");\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\");\n  spinner.succeed();\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function promptForMinimalConfig(\n  cwd: string,\n  defaultConfig: Config,\n  defaults = false,\n) {\n  const highlight = (text: string) => chalk.cyan(text);\n  let style = defaultConfig.style;\n  let baseColor = defaultConfig.tailwind.baseColor;\n  let cssVariables = defaultConfig.tailwind.cssVariables;\n\n  if (!defaults) {\n    const styles = await getRegistryStyles();\n    const baseColors = await getRegistryBaseColors();\n\n    const options = await prompts([\n      {\n        type: \"select\",\n        name: \"style\",\n        message: `Which ${highlight(\"style\")} would you like to use?`,\n        choices: styles.map((style) => ({\n          title: style.label,\n          value: style.name,\n        })),\n      },\n      {\n        type: \"select\",\n        name: \"tailwindBaseColor\",\n        message: `Which color would you like to use as ${highlight(\n          \"base color\",\n        )}?`,\n        choices: baseColors.map((color) => ({\n          title: color.label,\n          value: color.name,\n        })),\n      },\n      {\n        type: \"toggle\",\n        name: \"tailwindCssVariables\",\n        message: `Would you like to use ${highlight(\n          \"CSS variables\",\n        )} for colors?`,\n        initial: defaultConfig?.tailwind.cssVariables,\n        active: \"yes\",\n        inactive: \"no\",\n      },\n    ]);\n\n    style = options.style;\n    baseColor = options.tailwindBaseColor;\n    cssVariables = options.tailwindCssVariables;\n  }\n\n  const content = {\n    $schema: defaultConfig?.$schema,\n    style,\n    tailwind: {\n      ...defaultConfig?.tailwind,\n      baseColor,\n      cssVariables,\n    },\n    rsc: defaultConfig?.rsc,\n    tsx: defaultConfig?.tsx,\n    aliases: defaultConfig?.aliases,\n  };\n\n  const config = rawConfigSchema.parse(content);\n\n  // Write to file.\n  logger.info(\"\");\n  const spinner = ora(`Writing components.json...`).start();\n  const targetPath = path.resolve(cwd, \"components.json\");\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\");\n  spinner.succeed();\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function runInit(cwd: string, config: Config) {\n  const spinner = ora(`Initializing project...`)?.start();\n\n  // Ensure all resolved paths directories exist.\n  for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n    // Determine if the path is a file or directory.\n    // TODO: is there a better way to do this?\n    let dirname = path.extname(resolvedPath)\n      ? path.dirname(resolvedPath)\n      : resolvedPath;\n\n    // If the utils alias is set to something like \"@/lib/utils\",\n    // assume this is a file and remove the \"utils\" file name.\n    // TODO: In future releases we should add support for individual utils.\n    if (key === \"utils\" && resolvedPath.endsWith(\"/utils\")) {\n      // Remove /utils at the end.\n      dirname = dirname.replace(/\\/utils$/, \"\");\n    }\n\n    if (!existsSync(dirname)) {\n      await fs.mkdir(dirname, { recursive: true });\n    }\n  }\n\n  const extension = config.tsx ? \"ts\" : \"js\";\n\n  const tailwindConfigExtension = path.extname(\n    config.resolvedPaths.tailwindConfig,\n  );\n\n  let tailwindConfigTemplate: string;\n  if (tailwindConfigExtension === \".ts\") {\n    tailwindConfigTemplate = config.tailwind.cssVariables\n      ? templates.TAILWIND_CONFIG_TS_WITH_VARIABLES\n      : templates.TAILWIND_CONFIG_TS;\n  } else {\n    tailwindConfigTemplate = config.tailwind.cssVariables\n      ? templates.TAILWIND_CONFIG_WITH_VARIABLES\n      : templates.TAILWIND_CONFIG;\n  }\n\n  // // Write tailwind config.\n  await fs.writeFile(\n    config.resolvedPaths.tailwindConfig,\n    template(tailwindConfigTemplate)({\n      extension,\n      prefix: config.tailwind.prefix,\n    }),\n    \"utf8\",\n  );\n\n  // Write css file.\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor);\n  if (baseColor) {\n    await fs.writeFile(\n      config.resolvedPaths.tailwindCss,\n      config.tailwind.cssVariables\n        ? config.tailwind.prefix\n          ? applyPrefixesCss(baseColor.cssVarsTemplate, config.tailwind.prefix)\n          : baseColor.cssVarsTemplate\n        : baseColor.inlineColorsTemplate,\n      \"utf8\",\n    );\n  }\n\n  // // Write cn file.\n  await fs.writeFile(\n    `${config.resolvedPaths.utils}.${extension}`,\n    extension === \"ts\" ? templates.UTILS : templates.UTILS_JS,\n    \"utf8\",\n  );\n\n  spinner?.succeed();\n\n  // Install dependencies.\n  const dependenciesSpinner = ora(`Installing dependencies...`)?.start();\n  const packageManager = await getPackageManager(cwd);\n\n  // TODO: add support for other icon libraries.\n  const deps = [\n    ...PROJECT_DEPENDENCIES,\n    config.style === \"new-york\" ? \"@radix-ui/react-icons\" : \"lucide-react\",\n  ];\n\n  await execa(\n    packageManager,\n    [packageManager === \"npm\" ? \"install\" : \"add\", ...deps],\n    {\n      cwd,\n    },\n  );\n  dependenciesSpinner?.succeed();\n}\n","export const UTILS = `import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n`;\n\nexport const UTILS_JS = `import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n`;\n\nexport const TAILWIND_CONFIG = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  prefix: \"<%- prefix %>\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`;\n\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  prefix: \"<%- prefix %>\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`;\n\nexport const TAILWIND_CONFIG_TS = `import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n  ],\n  prefix: \"<%- prefix %>\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config`;\n\nexport const TAILWIND_CONFIG_TS_WITH_VARIABLES = `import type { Config } from \"tailwindcss\"\n\nconst config = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n\t],\n  prefix: \"<%- prefix %>\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config\n\nexport default config`;","import { existsSync } from \"fs\";\nimport path from \"path\";\nimport {\n  Config,\n  getConfig,\n  RawConfig,\n  resolveConfigPaths,\n} from \"@/src/utils/get-config\";\nimport fg from \"fast-glob\";\nimport fs, { pathExists } from \"fs-extra\";\nimport { loadConfig } from \"tsconfig-paths\";\n\n// TODO: Add support for more frameworks.\n// We'll start with Next.js for now.\nconst PROJECT_TYPES = [\n  \"next-app\",\n  \"next-app-src\",\n  \"next-pages\",\n  \"next-pages-src\",\n] as const;\n\ntype ProjectType = (typeof PROJECT_TYPES)[number];\n\nconst PROJECT_SHARED_IGNORE = [\n  \"**/node_modules/**\",\n  \".next\",\n  \"public\",\n  \"dist\",\n  \"build\",\n];\n\nexport async function getProjectInfo() {\n  const info = {\n    tsconfig: null,\n    srcDir: false,\n    appDir: false,\n    srcComponentsUiDir: false,\n    componentsUiDir: false,\n  };\n\n  try {\n    const tsconfig = await getTsConfig();\n\n    return {\n      tsconfig,\n      srcDir: existsSync(path.resolve(\"./src\")),\n      appDir:\n        existsSync(path.resolve(\"./app\")) ||\n        existsSync(path.resolve(\"./src/app\")),\n      srcComponentsUiDir: existsSync(path.resolve(\"./src/components/ui\")),\n      componentsUiDir: existsSync(path.resolve(\"./components/ui\")),\n    };\n  } catch (error) {\n    return info;\n  }\n}\n\nexport async function getTsConfig() {\n  try {\n    const tsconfigPath = path.join(\"tsconfig.json\");\n    const tsconfig = await fs.readJSON(tsconfigPath);\n\n    if (!tsconfig) {\n      throw new Error(\"tsconfig.json is missing\");\n    }\n\n    return tsconfig;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getProjectConfig(cwd: string): Promise<Config | null> {\n  // Check for existing component config.\n  const existingConfig = await getConfig(cwd);\n  if (existingConfig) {\n    return existingConfig;\n  }\n\n  const projectType = await getProjectType(cwd);\n  const tailwindCssFile = await getTailwindCssFile(cwd);\n  const tsConfigAliasPrefix = await getTsConfigAliasPrefix(cwd);\n\n  if (!projectType || !tailwindCssFile || !tsConfigAliasPrefix) {\n    return null;\n  }\n\n  const isTsx = await isTypeScriptProject(cwd);\n\n  const config: RawConfig = {\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    rsc: [\"next-app\", \"next-app-src\"].includes(projectType),\n    tsx: isTsx,\n    style: \"new-york\",\n    tailwind: {\n      config: isTsx ? \"tailwind.config.ts\" : \"tailwind.config.js\",\n      baseColor: \"zinc\",\n      css: tailwindCssFile,\n      cssVariables: true,\n      prefix: \"\",\n    },\n    aliases: {\n      utils: `${tsConfigAliasPrefix}/lib/utils`,\n      components: `${tsConfigAliasPrefix}/components`,\n      ui: `${tsConfigAliasPrefix}/components/ui`,\n      blocks: `${tsConfigAliasPrefix}/components/blocks`,\n      examples: `${tsConfigAliasPrefix}/components/examples`,\n    },\n  };\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function getProjectType(cwd: string): Promise<ProjectType | null> {\n  const files = await fg.glob(\"**/*\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  });\n\n  const isNextProject = files.find((file) => file.startsWith(\"next.config.\"));\n  if (!isNextProject) {\n    return null;\n  }\n\n  const isUsingSrcDir = await fs.pathExists(path.resolve(cwd, \"src\"));\n  const isUsingAppDir = await fs.pathExists(\n    path.resolve(cwd, `${isUsingSrcDir ? \"src/\" : \"\"}app`),\n  );\n\n  if (isUsingAppDir) {\n    return isUsingSrcDir ? \"next-app-src\" : \"next-app\";\n  }\n\n  return isUsingSrcDir ? \"next-pages-src\" : \"next-pages\";\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const files = await fg.glob(\"**/*.css\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  });\n\n  if (!files.length) {\n    return null;\n  }\n\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), \"utf8\");\n    // Assume that if the file contains `@tailwind base` it's the main css file.\n    if (contents.includes(\"@tailwind base\")) {\n      return file;\n    }\n  }\n\n  return null;\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const tsConfig = await loadConfig(cwd);\n\n  if (tsConfig?.resultType === \"failed\" || !tsConfig?.paths) {\n    return null;\n  }\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (paths.includes(\"./*\") || paths.includes(\"./src/*\")) {\n      return alias.at(0);\n    }\n  }\n\n  return null;\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  // Check if cwd has a tsconfig.json file.\n  return pathExists(path.resolve(cwd, \"tsconfig.json\"));\n}\n\nexport async function preFlight(cwd: string) {\n  // We need Tailwind CSS to be configured.\n  const tailwindConfig = await fg.glob(\"tailwind.config.*\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  });\n\n  if (!tailwindConfig.length) {\n    throw new Error(\n      \"Tailwind CSS is not installed. Visit https://tailwindcss.com/docs/installation to get started.\",\n    );\n  }\n\n  return true;\n}\n","#!/usr/bin/env node\nimport { add } from \"@/src/commands/add\";\nimport { init } from \"@/src/commands/init\";\nimport { Command } from \"commander\";\n\nimport { getPackageInfo } from \"./utils/get-package-info\";\nimport {\n  ASCII_TEXT,\n} from \"./utils/logger\";\n\nprocess.on(\"SIGINT\", async () => {\n  process.exit(0);\n});\n\nprocess.on(\"SIGTERM\", async () => {\n  process.exit(0);\n});\n\nasync function main() {\n  const packageInfo = await getPackageInfo();\n\n  const program = new Command()\n    .addHelpText(\"before\", ASCII_TEXT)\n    .name(\"aceternity-ui\")\n    .description(\"Add Aceternity UI components to your apps.\")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\",\n    );\n\n  program.addCommand(init).addCommand(add);\n  program.parse();\n}\n\nmain();\n","import path from \"path\";\nimport fs from \"fs-extra\";\nimport { type PackageJson } from \"type-fest\";\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\");\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson;\n}\n"],"mappings":"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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsClBC,GAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA8EjCC,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAyCrBC,GAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;uBD/JjD,OAAOC,OAAc,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","names":["existsSync","fs","path","path","createMatchPath","resolveImport","importPath","config","cosmiconfig","loadConfig","z","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","explorer","cosmiconfig","rawConfigSchema","z","configSchema","getConfig","cwd","config","getRawConfig","resolveConfigPaths","tsConfig","loadConfig","components","resolveImport","ui","newAliases","newConfig","path","configResult","detect","getPackageManager","targetDir","packageManager","chalk","gradient","logger","args","TEXT","theme","printer","ASCII_TEXT","handleError","error","logger","path","z","registryItemSchema","registryIndexSchema","registryItemWithContentSchema","registryWithContentSchema","stylesSchema","registryBaseColorSchema","HttpsProxyAgent","fetch","baseUrl","shadcnBaseUrl","agent","getRegistryIndexAceternityUI","result","fetchRegistry","registryIndexSchema","error","getRegistryIndexShadcn","getRegistryStyles","stylesSchema","getRegistryBaseColors","getRegistryBaseColor","baseColor","registryBaseColorSchema","resolveTreeWithShadcn","shadcnIndex","index","names","examples","calledByShadcn","shadcnTree","aceternityuiTree","name","entry","e","shadcnTreeDependencies","newName","shadcnEntry","exampleEntry","aceternityuiTreeDependencies","component","self","c","fetchTree","tree","paths","item","parent","subfolder","result","fetchRegistry","baseUrl","registryWithContentSchema","fetchTreeFromShadcn","style","shadcnBaseUrl","getItemTargetPath","config","override","type","path","fetchBaseUrl","env","fetch","agent","fs","tmpdir","path","SyntaxKind","transformCssVars","sourceFile","config","baseColor","node","value","valueWithColorMapping","applyColorMapping","splitClassName","className","parts","rest","alpha","split","name","variant","PREFIXES","input","mapping","classNames","lightMode","darkMode","modifier","prefix","needle","transformImport","sourceFile","config","importDeclarations","importDeclaration","moduleSpecifier","i","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","sourceFile","config","output","ast","code","result","SyntaxKind","transformRsc","sourceFile","config","first","Project","ScriptKind","SyntaxKind","transformTwPrefixes","sourceFile","config","SyntaxKind","node","defaultClassNames","applyPrefix","classNames","value","callExpression","arg","input","prefix","prefixed","className","variant","modifier","splitClassName","applyPrefixesCss","css","lines","line","originalTWCls","prefixedTwCls","shandcnTransformers","transformImport","transformRsc","transformCssVars","transformTwPrefixes","acetenirTransformers","project","Project","createTempSourceFile","filename","dir","fs","path","tmpdir","transform","opts","source","tempFile","sourceFile","ScriptKind","transformers","transformer","transformJsx","chalk","Command","execa","ora","prompts","z","addOptionsSchema","add","ASCII_TEXT","components","opts","options","cwd","path","existsSync","logger","config","getConfig","registryIndex","getRegistryIndexAceternityUI","shadcnRegistryIndex","getRegistryIndexShadcn","selectedComponents","entry","filterIndex","e","type","multiselectChoice","aceternityuiTree","shadcnTree","resolveTreeWithShadcn","aceternityPayload","fetchTree","shadcnPayload","fetchTreeFromShadcn","baseColor","getRegistryBaseColor","item","totalPayload","proceed","spinner","targetDir","getItemTargetPath","fs","file","overwrite","filePath","content","transform","packageManager","getPackageManager","error","handleError","existsSync","fs","path","UTILS","UTILS_JS","TAILWIND_CONFIG","TAILWIND_CONFIG_WITH_VARIABLES","TAILWIND_CONFIG_TS","TAILWIND_CONFIG_TS_WITH_VARIABLES","template","path","fg","fs","pathExists","loadConfig","PROJECT_SHARED_IGNORE","getProjectConfig","cwd","existingConfig","getConfig","projectType","getProjectType","tailwindCssFile","getTailwindCssFile","tsConfigAliasPrefix","getTsConfigAliasPrefix","isTsx","isTypeScriptProject","config","resolveConfigPaths","fg","PROJECT_SHARED_IGNORE","file","isUsingSrcDir","fs","path","files","tsConfig","loadConfig","alias","paths","pathExists","preFlight","chalk","Command","execa","ora","prompts","z","PROJECT_DEPENDENCIES","initOptionsSchema","z","init","Command","ASCII_TEXT","opts","options","cwd","path","existsSync","logger","preFlight","projectConfig","getProjectConfig","config","promptForMinimalConfig","runInit","existingConfig","getConfig","promptForConfig","chalk","error","handleError","defaultConfig","skip","highlight","text","styles","getRegistryStyles","baseColors","getRegistryBaseColors","prompts","style","color","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","DEFAULT_COMPONENTS","DEFAULT_UTILS","rawConfigSchema","proceed","spinner","ora","targetPath","fs","resolveConfigPaths","defaults","baseColor","cssVariables","content","key","resolvedPath","dirname","extension","tailwindConfigExtension","tailwindConfigTemplate","TAILWIND_CONFIG_TS_WITH_VARIABLES","TAILWIND_CONFIG_TS","TAILWIND_CONFIG_WITH_VARIABLES","TAILWIND_CONFIG","template","getRegistryBaseColor","applyPrefixesCss","UTILS","UTILS_JS","dependenciesSpinner","packageManager","getPackageManager","deps","execa","Command","path","fs","getPackageInfo","packageJsonPath","main","packageInfo","getPackageInfo","program","Command","ASCII_TEXT","init","add"]}